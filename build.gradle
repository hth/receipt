apply plugin: 'idea'

ext {
    webInf = file('/WEB-INF')
    lib = file("$webInf/lib")
    classes = file("$webInf/classes")
    conf = file("$classes/conf")
    images = file("$classes/images")

    warDevDir = file("$buildDir/explodedWar/dev")
    warDevWebInfDir = file("$warDevDir$webInf")
    warDevLibDir = file("$warDevDir$lib")
    warDevClassesDir = file("$warDevDir$classes")
    warDevConfDir = file("$warDevDir$conf")
    warDevWebInfClassesImagesDir = file("$warDevDir$images")

    warTestDir = file("$buildDir/explodedWar/test")
    warTestWebInfDir = file("$warTestDir$webInf")
    warTestLibDir = file("$warTestDir$lib")
    warTestClassesDir = file("$warTestDir$classes")
    warTestConfDir = file("$warTestDir$conf")
    warTestWebInfClassesImagesDir = file("$warTestDir$images")

    warProdDir = file("$buildDir/explodedWar/prod")
    warProdWebInfDir = file("$warProdDir$webInf")
    warProdLibDir = file("$warProdDir$lib")
    warProdClassesDir = file("$warProdDir$classes")
    warProdConfDir = file("$warProdDir$conf")
    warProdWebInfClassesImagesDir = file("$warProdDir$images")
}

allprojects {
    group = 'com.receiptofi'
    version = '0.9.0'
}

subprojects {
    apply plugin: 'java'

    //apply plugin: 'checkstyle' //for java code conventions
    apply plugin: 'jdepend' //for dependency analysis
    //apply plugin: 'findbugs' //for static code analysis
    apply plugin: 'pmd'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    jar {
        manifest {
            attributes(
                    "Implementation-Vendor": "Receiptofi Inc",
                    "Implementation-Title": rootProject.name,
                    "Implementation-Version": allprojects.version,
                    "Copyright" : "2014, Receiptofi Inc"
            )
        }
    }

    idea {
        module {
            downloadSources = true
            downloadJavadoc = false
        }
    }

    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/libs-milestone" }
        maven { url "http://repo1.maven.org/maven2/" }
    }

    dependencies {
        compile files('../lib/spring-social-core-1.1.0.RELEASE.jar')
        compile files('../lib/spring-social-facebook-1.1.1.RELEASE.jar')
        compile files('../lib/spring-social-google-1.0.0.RELEASE.jar')
        compile files('../lib/spring-social-security-1.1.0.RELEASE.jar')
        compile files('../lib/spring-social-web-1.1.0.RELEASE.jar')
        compile files('../lib/geronimo-j2ee-management_1.1_spec-1.0.1.jar')
        compile files('../lib/geronimo-jms_1.1_spec-1.1.1.jar')

        compile 'org.springframework:spring-aop:3.2.8.RELEASE'
        compile 'org.springframework:spring-aspects:3.2.9.RELEASE'
        compile 'org.springframework:spring-beans:3.2.9.RELEASE'
        compile 'org.springframework:spring-context:3.2.9.RELEASE'
        compile 'org.springframework:spring-context-support:3.2.9.RELEASE'
        compile 'org.springframework:spring-core:3.2.9.RELEASE'
        compile 'org.springframework:spring-expression:3.2.9.RELEASE'
        compile 'org.springframework:spring-instrument:3.2.9.RELEASE'
        compile 'org.springframework:spring-instrument-tomcat:3.2.9.RELEASE'
        compile 'org.springframework:spring-jms:3.2.9.RELEASE'
        compile 'org.springframework:spring-oxm:3.2.9.RELEASE'
        compile 'org.springframework:spring-test:3.2.9.RELEASE'
        compile 'org.springframework:spring-tx:3.2.9.RELEASE'
        compile 'org.springframework:spring-web:3.2.9.RELEASE'
        compile 'org.springframework:spring-webmvc:3.2.9.RELEASE'

        compile 'org.springframework.security:spring-security-aspects:3.2.4.RELEASE'
        compile 'org.springframework.security:spring-security-config:3.2.4.RELEASE'
        compile 'org.springframework.security:spring-security-core:3.2.4.RELEASE'
        compile 'org.springframework.security:spring-security-crypto:3.2.4.RELEASE'
        compile 'org.springframework.security:spring-security-taglibs:3.2.4.RELEASE'
        compile 'org.springframework.security:spring-security-web:3.2.4.RELEASE'

        compile 'org.springframework.data:spring-data-mongodb:1.5.0.RELEASE'
        compile 'org.springframework.data:spring-data-commons:1.8.0.RELEASE'
        compile 'org.mongodb:mongo-java-driver:2.12.2'

        compile 'org.apache.commons:commons-collections4:4.0'
        compile 'org.apache.commons:commons-lang3:3.3.2'

        compile 'aopalliance:aopalliance:1.0'
        compile 'org.aspectj:aspectjrt:1.7.4'
        compile 'com.fasterxml:classmate:1.0.0'
        compile 'org.slf4j:slf4j-api:1.7.7'
        compile 'org.hibernate:hibernate-validator:5.1.1.Final'
        compile 'joda-time:joda-time:2.3'
        compile 'com.google.guava:guava:17.0'
        compile 'javax.mail:mail:1.4.7'
        compile 'org.freemarker:freemarker:2.3.20'
        compile 'commons-validator:commons-validator:1.4.0'
        compile 'com.google.code.gson:gson:2.2.4'
        compile 'commons-io:commons-io:2.4'
        compile 'org.apache.poi:poi:3.10-FINAL'
        compile 'commons-codec:commons-codec:1.9'
        compile 'commons-logging:commons-logging:1.1.3'
        compile 'com.googlecode.libphonenumber:libphonenumber:6.0'
        compile 'com.fasterxml.jackson.core:jackson-annotations:2.4.0'
        compile 'com.fasterxml.jackson.core:jackson-core:2.4.0'
        compile 'com.fasterxml.jackson.core:jackson-databind:2.4.0'
        compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
        compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'

        compile 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:r232'
        compile 'javax.validation:validation-api:1.1.0.Final'
        compile 'org.hibernate:hibernate-validator:5.1.1.Final'
        compile 'commons-fileupload:commons-fileupload:1.3.1'
        compile 'commons-io:commons-io:2.4'
        compile 'javax.inject:javax.inject:1'
        compile 'org.apache.activemq:activemq-client:5.9.0'
        compile 'javax.mail:mail:1.4.7'
        compile 'org.quartz-scheduler:quartz:2.2.1'
        compile 'org.apache.commons:commons-lang3:3.3.2'

        compile 'org.apache.httpcomponents:httpclient:4.3.4'

        compile 'ch.qos.logback:logback-core:1.1.2'
        compile 'ch.qos.logback:logback-classic:1.1.2'
        compile 'net.logstash.logback:logstash-logback-encoder:2.7'
        compile 'net.bull.javamelody:javamelody-core:1.+'

        compile 'net.sf.uadetector:uadetector-core:0.9.16'
        compile 'net.sf.uadetector:uadetector-resources:2014.04'

        compile 'javax.validation:validation-api:1.1.0.Final'

        testCompile group: 'junit', name: 'junit', version: '4.+'
    }
}

project(':common') {
    jar.baseName = 'receiptofi-common'
}

project(':domain') {
    jar.baseName = 'receiptofi-domain'

    dependencies {
        compile project(':common')
    }
}

project(':service') {
    jar.baseName = 'receiptofi-service'

    dependencies {
        compile project(':common'), project(':domain')
    }
}

project(':security') {
    apply plugin: 'war'
    jar.baseName = 'receiptofi-security'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(':common'), project(':domain')

        providedCompile 'javax.servlet:javax.servlet-api:3.1.+'
        runtime 'javax.servlet:jstl:1.+'
    }
}

project(':social') {
    apply plugin: 'war'
    jar.baseName = 'receiptofi-social'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(':common'), project(':domain'), project(':service')

        providedCompile 'javax.servlet:javax.servlet-api:3.1.+'
        runtime 'javax.servlet:jstl:1.+'
    }
}

project(':web') {
    apply plugin: 'war'
    jar.baseName = 'receiptofi-web'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(':common'), project(':domain'), project(':security'), project(':social'), project(':service')

        providedCompile 'javax.servlet:javax.servlet-api:3.1.+'
        runtime 'javax.servlet:jstl:1.+'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

task copyDevJars(type: Copy) {
    from 'common/build/libs'
    from 'domain/build/libs'
    from 'service/build/libs'
    from 'security/build/libs'
    from 'social/build/libs'
    from 'web/build/libs'
    into warDevLibDir
    include '**/*.jar'
}

task copyTestJars(type: Copy) {
    from 'common/build/libs'
    from 'domain/build/libs'
    from 'service/build/libs'
    from 'security/build/libs'
    from 'social/build/libs'
    from 'web/build/libs'
    into warTestLibDir
    include '**/*.jar'
}

task copyProdJars(type: Copy) {
    from 'common/build/libs'
    from 'domain/build/libs'
    from 'service/build/libs'
    from 'security/build/libs'
    from 'social/build/libs'
    from 'web/build/libs'
    into warProdLibDir
    include '**/*.jar'
}

task prepDevWar(dependsOn: [copyDevJars]) << {
    warDevClassesDir.mkdirs()
    warDevConfDir.mkdirs()

    copy {
        from 'web/web'
        into warDevDir
        exclude '**/*.classes'
    }

    copy {
        from 'web/environment/dev/dev.properties'
        into warDevConfDir
    }

    copy {
        from 'web/resources/conf/application-messages.properties'
        from 'web/resources/conf/config.properties'
        from 'web/resources/conf/pass.properties'
        from 'web/resources/conf/redis.properties'
        into warDevConfDir
    }

    copy {
        from 'web/environment/dev/logback.xml'
        from 'web/resources/conf/messages.properties'
        into warDevClassesDir
    }

    copy {
        from 'web/environment/dev/receipt-servlet.xml'
        into warDevWebInfDir
    }

    copy {
        from 'web/web/static/images'
        into warDevWebInfClassesImagesDir
    }
}

task prepTestWar(dependsOn: [copyTestJars]) << {
    warTestClassesDir.mkdirs()
    warTestConfDir.mkdirs()

    copy {
        from 'web/web'
        into warTestDir
        exclude '**/*.classes'
    }

    copy {
        from 'web/environment/test/qa.properties'
        into warTestConfDir
    }

    copy {
        from 'web/resources/conf/application-messages.properties'
        from 'web/resources/conf/config.properties'
        from 'web/resources/conf/pass.properties'
        from 'web/resources/conf/redis.properties'
        into warTestConfDir
    }

    copy {
        from 'web/environment/test/logback.xml'
        from 'web/resources/conf/messages.properties'
        into warTestClassesDir
    }

    copy {
        from 'web/environment/test/receipt-servlet.xml'
        into warTestWebInfDir
    }

    copy {
        from 'web/web/static/images'
        into warTestWebInfClassesImagesDir
    }
}

task prepProdWar(dependsOn: [copyProdJars]) << {
    warProdClassesDir.mkdirs()
    warProdConfDir.mkdirs()

    copy {
        from 'web/web'
        into warProdDir
        exclude '**/*.classes'
    }

    copy {
        from 'web/environment/prod/prod.properties'
        into warProdConfDir
    }

    copy {
        from 'web/resources/conf/application-messages.properties'
        from 'web/resources/conf/config.properties'
        from 'web/resources/conf/pass.properties'
        from 'web/resources/conf/redis.properties'
        into warProdConfDir
    }

    copy {
        from 'web/environment/prod/logback.xml'
        from 'web/resources/conf/messages.properties'
        into warProdClassesDir
    }

    copy {
        from 'web/environment/prod/receipt-servlet.xml'
        into warProdWebInfDir
    }

    copy {
        from 'web/web/static/images'
        into warProdWebInfClassesImagesDir
    }
}

task cleanDev(type: Delete) {
    delete warDevDir
}

task cleanTest(type: Delete) {
    delete warTestDir
}

task cleanProd(type: Delete) {
    delete warProdDir
}

task clean(dependsOn: [cleanDev, cleanTest, cleanProd]) {
    delete buildDir
}

task prepWar(dependsOn: [prepDevWar, prepTestWar, prepProdWar]) {

}

task devWar(type: War, dependsOn: prepDevWar) {
    from warDevDir
    version ""
    destinationDir = file("$buildDir/war/dev")
    baseName = 'receiptofi-dev'
}

task testWar(type: War, dependsOn: prepTestWar) {
    from warTestDir
    version ""
    destinationDir = file("$buildDir/war/test")
    baseName = 'receiptofi-test'
}

task prodWar(type: War, dependsOn: prepProdWar) {
    from warProdDir
    version ""
    destinationDir = file("$buildDir/war/prod")
    baseName = 'receiptofi-prod'
}

task war(dependsOn: [devWar, testWar, prodWar]) {

}

defaultTasks 'clean', 'jar'