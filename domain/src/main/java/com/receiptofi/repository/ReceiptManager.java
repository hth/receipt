/**
 *
 */
package com.receiptofi.repository;

import com.receiptofi.domain.BizNameEntity;
import com.receiptofi.domain.BizStoreEntity;
import com.receiptofi.domain.ReceiptEntity;
import com.receiptofi.domain.annotation.Mobile;
import com.receiptofi.domain.value.ReceiptGrouped;
import com.receiptofi.domain.value.ReceiptGroupedByBizLocation;
import com.receiptofi.domain.value.ReceiptListViewGrouped;

import org.joda.time.DateTime;

import java.util.Date;
import java.util.Iterator;
import java.util.List;

/**
 * @author hitender
 * @since Dec 26, 2012 3:09:48 PM
 */
public interface ReceiptManager extends RepositoryManager<ReceiptEntity> {

    /**
     * @param receiptId
     * @param receiptUserId
     * @return
     */
    ReceiptEntity findReceipt(String receiptId, String receiptUserId);

    /**
     * Get receipt for specific user ignoring other status of this receipt.
     *
     * @param receiptId
     * @param receiptUserId
     * @return
     */
    @Mobile
    ReceiptEntity findReceiptForMobile(String receiptId, String receiptUserId);

    /**
     * Get receipt for specific user.
     *
     * @param receiptId
     * @param receiptUserId
     * @return
     */
    ReceiptEntity findOne(String receiptId, String receiptUserId);

    /**
     * Find all receipts with BizName for the user
     *
     * @param bizNameEntity
     * @param receiptUserId
     * @return
     */
    List<ReceiptEntity> findReceipt(BizNameEntity bizNameEntity, String receiptUserId, DateTime receiptForMonth);

    /**
     * Gets all the user receipts. Refrain from using open ended query.
     *
     * @param receiptUserId
     * @return
     */
    List<ReceiptEntity> getAllActiveReceipts(String receiptUserId);

    /**
     *
     * @param receiptUserId
     * @return
     */
    @Mobile
    List<ReceiptEntity> getAllReceipts(String receiptUserId);

    /**
     * Get receipts only the selected year.
     *
     * @param receiptUserId
     * @param startOfTheYear
     * @return
     */
    List<ReceiptEntity> getAllReceiptsForTheYear(String receiptUserId, DateTime startOfTheYear);

    /**
     * Gets user receipts for current month.
     *
     * @param receiptUserId
     * @return
     */
    List<ReceiptEntity> getAllReceiptsForThisMonth(String receiptUserId, DateTime monthYear);

    /**
     * Gets all updated receipts since specified time
     *
     * @param receiptUserId
     * @param since
     * @return
     */
    @Mobile
    List<ReceiptEntity> getAllUpdatedReceiptSince(String receiptUserId, Date since);

    /**
     * Get receipts associated with year, month, day.
     *
     * @param year
     * @param month
     * @param day
     * @param receiptUserId
     * @return
     */
    List<ReceiptEntity> findThisDayReceipts(int year, int month, int day, String receiptUserId);

    /**
     * Receipt grouped by day.
     *
     * @param receiptUserId
     * @return
     */
    Iterator<ReceiptGrouped> getAllObjectsGroupedByDate(String receiptUserId);

    /**
     * Receipt grouped by month for last 13 months.
     *
     * @param rid
     * @return
     */
    List<ReceiptGrouped> getReceiptGroupedByMonth(String rid);

    /**
     * Gets all receipts for month.
     *
     * @param rid
     * @param month
     * @param year
     * @return
     */
    List<ReceiptListViewGrouped> getReceiptForGroupedByMonth(String rid, int month, int year);

    /**
     * Group receipts by location and sum up the total expense on that particular business location.
     *
     * @param receiptUserId
     * @return
     */
    Iterator<ReceiptGroupedByBizLocation> getAllReceiptGroupedByBizLocation(String receiptUserId);

    ReceiptEntity findWithReceiptOCR(String documentId);

    void deleteSoft(ReceiptEntity object);

    /**
     * Count includes all active and inactive receipts.
     *
     * @param bizStoreEntity
     * @return
     */
    long countAllReceiptForAStore(BizStoreEntity bizStoreEntity);

    /**
     * Count includes all active and inactive receipts.
     *
     * @param bizNameEntity
     * @return
     */
    long countAllReceiptForABizName(BizNameEntity bizNameEntity);

    /**
     * Check if not deleted receipt exists.
     *
     * @param checksum
     * @return
     */
    boolean notDeletedChecksumDuplicate(String checksum, String id);

    /**
     * Return existing active receipt. This method will be helpful when we plan
     * to notify technician about the duplicate receipt.
     * Example when similar receipt exists in re-check condition.
     *
     * @param checksum
     * @return
     */
    ReceiptEntity findNotDeletedChecksumDuplicate(String checksum, String id);

    /**
     * Find if receipt with similar checksum exists.
     *
     * @param checksum
     * @return
     */
    boolean hasRecordWithSimilarChecksum(String checksum);

    /**
     * Removes reference to expensofi file name in file system. This is expense excel file generated by user.
     *
     * @param filename
     */
    void removeExpensofiFilenameReference(String filename);

    List<ReceiptEntity> findAllReceipts(String rid);

    /**
     * Collection size.
     */
    long collectionSize();
}
