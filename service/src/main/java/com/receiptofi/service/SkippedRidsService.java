package com.receiptofi.service;

import com.receiptofi.domain.GenerateUserIds;
import com.receiptofi.domain.UserAccountEntity;
import com.receiptofi.repository.GenerateUserIdManager;
import com.receiptofi.repository.UserAccountManager;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.TimeUnit;

/**
 * User: hitender
 * Date: 8/13/16 3:22 PM
 */
@Service
public class SkippedRidsService {
    private static final Logger LOG = LoggerFactory.getLogger(SkippedRidsService.class);

    private int lookBackUntilRid;
    private String keySkippedRids;
    private boolean foundSkippedRids = true;

    private GenerateUserIdManager generateUserIdManager;
    private UserAccountManager userAccountManager;
    private RedisTemplate<String, Object> redisTemplate;

    @Autowired
    public SkippedRidsService(
            /**
             * This limit is based on number of signup between server restarts.
             * In future this number would have to be adjusted.
             */
            @Value ("${lookBackUntilRid:500}")
            int lookBackUntilRid,

            @Value ("${redis.key.skippedRids:SKIPPED_RIDS}")
            String keySkippedRids,

            GenerateUserIdManager generateUserIdManager,
            UserAccountManager userAccountManager,
            RedisTemplate<String, Object> redisTemplate) {
        this.lookBackUntilRid = lookBackUntilRid;
        this.keySkippedRids = keySkippedRids;

        this.generateUserIdManager = generateUserIdManager;
        this.userAccountManager = userAccountManager;
        this.redisTemplate = redisTemplate;

        this.redisTemplate.expire(keySkippedRids, 1, TimeUnit.DAYS);

        /** Auto correct when some RIDs are skipped. */
        ConcurrentLinkedQueue<Long> dequeRids = new ConcurrentLinkedQueue<>(findSkippedRids());
        if (dequeRids.isEmpty()) {
            foundSkippedRids = false;
        }
        this.redisTemplate.opsForValue().set(keySkippedRids, dequeRids);
        LOG.info("Size of skipped rids={} ids={}", dequeRids.size(), getSkippedRids());

    }

    boolean hasFoundSkippedRids() {
        return foundSkippedRids;
    }

    String getNextAutoGeneratedUserId() {
        ConcurrentLinkedQueue<Long> skippedRids = getSkippedRids();
        Assert.notEmpty(skippedRids);

        String rid = String.valueOf(skippedRids.poll());
        this.redisTemplate.opsForValue().set(keySkippedRids, skippedRids);
        return rid;
    }

    private ConcurrentLinkedQueue<Long> getSkippedRids() {
        return (ConcurrentLinkedQueue<Long>) this.redisTemplate.opsForValue().get(keySkippedRids);
    }

    /**
     * Find all the RID's that have been skipped because of some issue. This can happen.
     * Note: The code is not adaptive. Should find skipped RID's. But this code finds it
     * when server re-starts.
     *
     * @return
     */
    private Set<Long> findSkippedRids() {
        long lastGenerateUserId = generateUserIdManager.getLastGenerateUserId();

        List<UserAccountEntity> userAccounts = userAccountManager.getLastSoManyRecords(lookBackUntilRid);
        Set<Long> userAccountWithIds = new HashSet<>();
        for (UserAccountEntity userAccount : userAccounts) {
            userAccountWithIds.add(Long.parseLong(userAccount.getReceiptUserId()));
        }

        Set<Long> skippedRids = new HashSet<>();
        long start = lastGenerateUserId - lookBackUntilRid;
        if (start < GenerateUserIds.STARTING_USER_ID) {
            start = GenerateUserIds.STARTING_USER_ID;
        }

        while (start <= lastGenerateUserId) {
            skippedRids.add(start);
            start++;
        }
        skippedRids.removeAll(userAccountWithIds);
        return skippedRids;
    }
}